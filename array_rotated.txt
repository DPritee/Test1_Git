/* find element in rotated sorted array 
 apporoach: binary search by finding regions*/
 
 #include<bits/stdc++.h>
 using namespace std;
 
int solve(vector<int>v, int start, int end, int key)
 {
     cout<<"\n in solve..";
     int n = v.size();
     int mid = (start+end)/2;
     cout<<"\n now mid:"<<v[mid];
     if(v[mid] == key)
     {
        cout<<"\n Key found at position :: "<<mid;
        return mid;
     }
     
     if(v[mid] >= v[start])
     {
         cout<<"\n in first part..";
         cout<<v[start]<<" "<<v[end];
         
         if(v[start]>key || key>v[mid])
         {
             cout<<"\n key is in second part..";
             start = mid+1;
         }
         else 
          end = mid-1;
         
          cout<<"\n now start:"<<start<<"  end:"<<end;
     }
     else
     {
         cout<<"\n in second part..";
         if(key >= v[start])
          end = mid-1;
         else if(key < v[mid])
          end = mid-1;
         else
          start = mid+1;
     }
    return bsearch(v, start, end, key);   
 }
 
 int main()
 {
     std::vector<int>v = {5,6,7,8,9,1,2,3,4};
     int ans = solve(v, 0, v.size()-1, 4);
     cout<<"\n ans:"<<ans<<" ele:"<<v[ans];
 }